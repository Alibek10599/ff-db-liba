"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlatFileDb = void 0;
const fs = require("fs");
const promises_1 = require("fs/promises");
class FlatFileDb {
    constructor(filePath) {
        this.filePath = filePath;
    }
    getFilePath() {
        return this.filePath;
    }
    async checkFileExists(path) {
        if (!fs.existsSync(path)) {
            fs.writeFileSync(path, '');
        }
        return true;
    }
    async save(records) {
        return (0, promises_1.writeFile)(this.filePath, JSON.stringify(records)).then(() => records);
    }
    async getAllRecords() {
        return (0, promises_1.readFile)(this.filePath)
            .then((body) => JSON.parse(body.toString()));
    }
    async getRecordById(id) {
        return this.getAllRecords().then((records) => records.find((record) => record.id === id)).then((record) => {
            if (!record)
                throw new Error(`Record with id ${id} not found`);
            return record;
        });
    }
    async createRecord(record) {
        return this.getAllRecords().then((records) => {
            record.id = (records.length + 1).toString();
            return [...records, record];
        }).then((newRecords) => this.save(newRecords));
    }
    async updateRecord(id, record) {
        return this.getAllRecords().then((records) => {
            return records.map(r => {
                if (r.id == id) {
                    return record;
                }
                return r;
            });
        })
            .then((newRecords) => this.save(newRecords));
    }
    async deleteRecord(id) {
        this.getAllRecords().then((records) => {
            return records.map(r => {
                if (r.id != id) {
                    return r;
                }
            });
        })
            .then((newRecords) => this.save(newRecords));
    }
}
exports.FlatFileDb = FlatFileDb;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxhdC1maWxlLWRiLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2ZsYXQtZmlsZS1kYi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx5QkFBeUI7QUFDekIsMENBQWtEO0FBSWxELE1BQWEsVUFBVTtJQUduQixZQUFZLFFBQWdCO1FBQzFCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzNCLENBQUM7SUFFRCxXQUFXO1FBQ1QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxLQUFLLENBQUMsZUFBZSxDQUFDLElBQVk7UUFDaEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDeEIsRUFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDNUI7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxLQUFLLENBQUMsSUFBSSxDQUFJLE9BQW9CO1FBQ2hDLE9BQU8sSUFBQSxvQkFBUyxFQUNkLElBQUksQ0FBQyxRQUFRLEVBQ2IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FDeEIsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDdkIsQ0FBQztJQUVELEtBQUssQ0FBQyxhQUFhO1FBQ2xCLE9BQU8sSUFBQSxtQkFBUSxFQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7YUFDN0IsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFlLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBZ0IsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFRCxLQUFLLENBQUMsYUFBYSxDQUFJLEVBQVU7UUFDL0IsT0FBTyxJQUFJLENBQUMsYUFBYSxFQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUMzRCxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQzdCLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUNqQixJQUFJLENBQUMsTUFBTTtnQkFBRSxNQUFNLElBQUksS0FBSyxDQUFDLGtCQUFrQixFQUFFLFlBQVksQ0FBQyxDQUFDO1lBQy9ELE9BQU8sTUFBTSxDQUFBO1FBQ2YsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsS0FBSyxDQUFDLFlBQVksQ0FBSSxNQUFpQjtRQUN0QyxPQUFPLElBQUksQ0FBQyxhQUFhLEVBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUM3QyxNQUFNLENBQUMsRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUM1QyxPQUFPLENBQUMsR0FBRyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDOUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVELEtBQUssQ0FBQyxZQUFZLENBQUksRUFBVSxFQUFFLE1BQWlCO1FBQ2pELE9BQU8sSUFBSSxDQUFDLGFBQWEsRUFBSyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQzlDLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDckIsSUFBRyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBQztvQkFDWixPQUFPLE1BQU0sQ0FBQztpQkFDZjtnQkFDRCxPQUFPLENBQUMsQ0FBQztZQUNYLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDO2FBQ0QsSUFBSSxDQUFDLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUE7SUFDOUMsQ0FBQztJQUVELEtBQUssQ0FBQyxZQUFZLENBQUMsRUFBVTtRQUMzQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDcEMsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUNyQixJQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFDO29CQUNaLE9BQU8sQ0FBQyxDQUFDO2lCQUNWO1lBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUM7YUFDRCxJQUFJLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQTtJQUM5QyxDQUFDO0NBQ0Y7QUFwRUgsZ0NBb0VHIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHsgd3JpdGVGaWxlLCByZWFkRmlsZSB9IGZyb20gJ2ZzL3Byb21pc2VzJztcblxuaW1wb3J0IHsgUmVjb3JkIH0gZnJvbSAnLi9pbnRlcmZhY2UnO1xuXG5leHBvcnQgY2xhc3MgRmxhdEZpbGVEYiB7XG4gICAgcHVibGljIGZpbGVQYXRoOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihmaWxlUGF0aDogc3RyaW5nKSB7XG4gICAgICB0aGlzLmZpbGVQYXRoID0gZmlsZVBhdGg7XG4gICAgfVxuICAgIFxuICAgIGdldEZpbGVQYXRoKCk6IHN0cmluZyB7XG4gICAgICByZXR1cm4gdGhpcy5maWxlUGF0aDtcbiAgICB9XG4gIFxuICAgIGFzeW5jIGNoZWNrRmlsZUV4aXN0cyhwYXRoOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgIGlmICghZnMuZXhpc3RzU3luYyhwYXRoKSkge1xuICAgICAgICBmcy53cml0ZUZpbGVTeW5jKHBhdGgsICcnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgXG4gICAgYXN5bmMgc2F2ZTxUPihyZWNvcmRzOiBSZWNvcmQ8VD5bXSk6IFByb21pc2U8UmVjb3JkPFQ+W10+IHtcbiAgICAgIHJldHVybiB3cml0ZUZpbGUoXG4gICAgICAgIHRoaXMuZmlsZVBhdGgsXG4gICAgICAgIEpTT04uc3RyaW5naWZ5KHJlY29yZHMpXG4gICAgICApLnRoZW4oKCkgPT4gcmVjb3JkcylcbiAgICB9XG4gIFxuICAgIGFzeW5jIGdldEFsbFJlY29yZHM8VD4oKTogUHJvbWlzZTxSZWNvcmQ8VD5bXT4ge1xuICAgICByZXR1cm4gcmVhZEZpbGUodGhpcy5maWxlUGF0aClcbiAgICAgLnRoZW4oKGJvZHkpOiBSZWNvcmQ8VD5bXSA9PiBKU09OLnBhcnNlKGJvZHkudG9TdHJpbmcoKSkgYXMgUmVjb3JkPFQ+W10pO1xuICAgIH1cbiAgXG4gICAgYXN5bmMgZ2V0UmVjb3JkQnlJZDxUPihpZDogc3RyaW5nKTogUHJvbWlzZTxSZWNvcmQ8VD4+IHtcbiAgICAgIHJldHVybiB0aGlzLmdldEFsbFJlY29yZHM8VD4oKS50aGVuKChyZWNvcmRzKSA9PiByZWNvcmRzLmZpbmQoXG4gICAgICAgIChyZWNvcmQpID0+IHJlY29yZC5pZCA9PT0gaWRcbiAgICAgICkpLnRoZW4oKHJlY29yZCkgPT4ge1xuICAgICAgICBpZiAoIXJlY29yZCkgdGhyb3cgbmV3IEVycm9yKGBSZWNvcmQgd2l0aCBpZCAke2lkfSBub3QgZm91bmRgKTtcbiAgICAgICAgcmV0dXJuIHJlY29yZFxuICAgICAgfSk7XG4gICAgfVxuICBcbiAgICBhc3luYyBjcmVhdGVSZWNvcmQ8VD4ocmVjb3JkOiBSZWNvcmQ8VD4pOiBQcm9taXNlPFJlY29yZDxUPltdPiB7XG4gICAgIHJldHVybiB0aGlzLmdldEFsbFJlY29yZHM8VD4oKS50aGVuKChyZWNvcmRzKSA9PiB7XG4gICAgICAgIHJlY29yZC5pZCA9IChyZWNvcmRzLmxlbmd0aCArIDEpLnRvU3RyaW5nKCk7XG4gICAgICAgIHJldHVybiBbLi4ucmVjb3JkcywgcmVjb3JkXTtcbiAgICAgIH0pLnRoZW4oKG5ld1JlY29yZHMpID0+IHRoaXMuc2F2ZShuZXdSZWNvcmRzKSk7XG4gICAgfVxuICBcbiAgICBhc3luYyB1cGRhdGVSZWNvcmQ8VD4oaWQ6IHN0cmluZywgcmVjb3JkOiBSZWNvcmQ8VD4pOiBQcm9taXNlPFJlY29yZDxUPltdPiB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRBbGxSZWNvcmRzPFQ+KCkudGhlbigocmVjb3JkcykgPT4ge1xuICAgICAgICByZXR1cm4gcmVjb3Jkcy5tYXAociA9PiB7XG4gICAgICAgICAgaWYoci5pZCA9PSBpZCl7XG4gICAgICAgICAgICByZXR1cm4gcmVjb3JkOyBcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgIH0pO1xuICAgICAgfSlcbiAgICAgIC50aGVuKChuZXdSZWNvcmRzKSA9PiB0aGlzLnNhdmUobmV3UmVjb3JkcykpXG4gICAgfVxuICBcbiAgICBhc3luYyBkZWxldGVSZWNvcmQoaWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgdGhpcy5nZXRBbGxSZWNvcmRzKCkudGhlbigocmVjb3JkcykgPT4ge1xuICAgICAgICByZXR1cm4gcmVjb3Jkcy5tYXAociA9PiB7XG4gICAgICAgICAgaWYoci5pZCAhPSBpZCl7IFxuICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgICAudGhlbigobmV3UmVjb3JkcykgPT4gdGhpcy5zYXZlKG5ld1JlY29yZHMpKVxuICAgIH1cbiAgfSJdfQ==
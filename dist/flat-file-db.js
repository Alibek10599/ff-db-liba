"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlatFileDb = void 0;
const fs = require("fs");
const promises_1 = require("fs/promises");
class FlatFileDb {
    constructor(filePath) {
        this.filePath = filePath;
    }
    getFilePath() {
        return this.filePath;
    }
    async checkFileExists(path) {
        if (!fs.existsSync(path)) {
            fs.writeFileSync(path, '');
        }
        return true;
    }
    async save(data) {
        return (0, promises_1.writeFile)(this.filePath, JSON.stringify(data)).then(() => { data; });
    }
    async getAllRecords() {
        const records = JSON.parse(await (0, promises_1.readFile)(this.filePath, 'utf8'));
        return records;
    }
    async getRecordById(id) {
        const record = (await this.getAllRecords()).find((record) => record.id === id);
        if (!record)
            throw new Error(`Record with id ${id} not found`);
        return record;
    }
    async createRecord(record) {
        const records = await this.getAllRecords();
        const id = records.length + 1;
        record.id = id.toString();
        records.push(record);
        await this.save(records);
        return record;
    }
    async updateRecord(id, record) {
        const records = await this.getAllRecords();
        const recordIndex = records.findIndex((record) => record.id === id);
        if (recordIndex === -1) {
            throw new Error(`Record with id ${id} not found`);
        }
        records[recordIndex] = record;
        await this.save(records);
        return record;
    }
    async deleteRecord(id) {
        const records = await this.getAllRecords();
        const record = records.find((record) => record.id === id);
        if (!record) {
            throw new Error(`Record with id ${id} not found`);
        }
        records.splice(records.indexOf(record), 1);
        await this.save(records);
    }
}
exports.FlatFileDb = FlatFileDb;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxhdC1maWxlLWRiLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2ZsYXQtZmlsZS1kYi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx5QkFBeUI7QUFDekIsMENBQWtEO0FBSWxELE1BQWEsVUFBVTtJQUduQixZQUFZLFFBQWdCO1FBQzFCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzNCLENBQUM7SUFHRCxXQUFXO1FBQ1QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxLQUFLLENBQUMsZUFBZSxDQUFDLElBQVk7UUFDaEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDeEIsRUFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDNUI7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxLQUFLLENBQUMsSUFBSSxDQUFJLElBQWlCO1FBQzdCLE9BQU8sSUFBQSxvQkFBUyxFQUNkLElBQUksQ0FBQyxRQUFRLEVBQ2IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FDckIsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUUsSUFBSSxDQUFBLENBQUEsQ0FBQyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVELEtBQUssQ0FBQyxhQUFhO1FBQ2YsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FDdEIsTUFBTSxJQUFBLG1CQUFRLEVBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FDdkIsQ0FBQztRQUNqQixPQUFPLE9BQU8sQ0FBQztJQUNyQixDQUFDO0lBRUQsS0FBSyxDQUFDLGFBQWEsQ0FBSSxFQUFVO1FBQy9CLE1BQU0sTUFBTSxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsYUFBYSxFQUFLLENBQUMsQ0FBQyxJQUFJLENBQ2pELENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FDN0IsQ0FBQztRQUNGLElBQUksQ0FBQyxNQUFNO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUMvRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQsS0FBSyxDQUFDLFlBQVksQ0FBSSxNQUFpQjtRQUNyQyxNQUFNLE9BQU8sR0FBRyxNQUFNLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUMzQyxNQUFNLEVBQUUsR0FBVyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUN0QyxNQUFNLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUN4QixPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZCLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6QixPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQsS0FBSyxDQUFDLFlBQVksQ0FBSSxFQUFVLEVBQUUsTUFBaUI7UUFDakQsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDM0MsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUNwRSxJQUFJLFdBQVcsS0FBSyxDQUFDLENBQUMsRUFBRTtZQUN0QixNQUFNLElBQUksS0FBSyxDQUFDLGtCQUFrQixFQUFFLFlBQVksQ0FBQyxDQUFDO1NBQ25EO1FBQ0QsT0FBTyxDQUFDLFdBQVcsQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUM5QixNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDekIsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVELEtBQUssQ0FBQyxZQUFZLENBQUMsRUFBVTtRQUMzQixNQUFNLE9BQU8sR0FBRyxNQUFNLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUMzQyxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQzFELElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDWCxNQUFNLElBQUksS0FBSyxDQUFDLGtCQUFrQixFQUFFLFlBQVksQ0FBQyxDQUFDO1NBQ25EO1FBQ0QsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzNDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMzQixDQUFDO0NBQ0Y7QUF0RUgsZ0NBc0VHIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHsgd3JpdGVGaWxlLCByZWFkRmlsZSB9IGZyb20gJ2ZzL3Byb21pc2VzJztcblxuaW1wb3J0IHsgUmVjb3JkIH0gZnJvbSAnLi9pbnRlcmZhY2UnO1xuXG5leHBvcnQgY2xhc3MgRmxhdEZpbGVEYiB7XG4gICAgcHVibGljIGZpbGVQYXRoOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihmaWxlUGF0aDogc3RyaW5nKSB7XG4gICAgICB0aGlzLmZpbGVQYXRoID0gZmlsZVBhdGg7XG4gICAgfVxuICAgIFxuICAgIFxuICAgIGdldEZpbGVQYXRoKCk6IHN0cmluZyB7XG4gICAgICByZXR1cm4gdGhpcy5maWxlUGF0aDtcbiAgICB9XG4gIFxuICAgIGFzeW5jIGNoZWNrRmlsZUV4aXN0cyhwYXRoOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgIGlmICghZnMuZXhpc3RzU3luYyhwYXRoKSkge1xuICAgICAgICBmcy53cml0ZUZpbGVTeW5jKHBhdGgsICcnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgXG4gICAgYXN5bmMgc2F2ZTxUPihkYXRhOiBSZWNvcmQ8VD5bXSk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgcmV0dXJuIHdyaXRlRmlsZShcbiAgICAgICAgdGhpcy5maWxlUGF0aCxcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkoZGF0YSksXG4gICAgICApLnRoZW4oKCkgPT4ge2RhdGF9KTtcbiAgICB9XG4gIFxuICAgIGFzeW5jIGdldEFsbFJlY29yZHM8VD4oKTogUHJvbWlzZTxSZWNvcmQ8VD5bXT4ge1xuICAgICAgICBjb25zdCByZWNvcmRzID0gSlNPTi5wYXJzZShcbiAgICAgICAgICAgIGF3YWl0IHJlYWRGaWxlKHRoaXMuZmlsZVBhdGgsICd1dGY4JylcbiAgICAgICAgICApIGFzIFJlY29yZDxUPltdO1xuICAgICAgICAgIHJldHVybiByZWNvcmRzO1xuICAgIH1cbiAgXG4gICAgYXN5bmMgZ2V0UmVjb3JkQnlJZDxUPihpZDogc3RyaW5nKTogUHJvbWlzZTxSZWNvcmQ8VD4+IHtcbiAgICAgIGNvbnN0IHJlY29yZCA9IChhd2FpdCB0aGlzLmdldEFsbFJlY29yZHM8VD4oKSkuZmluZChcbiAgICAgICAgKHJlY29yZCkgPT4gcmVjb3JkLmlkID09PSBpZFxuICAgICAgKTtcbiAgICAgIGlmICghcmVjb3JkKSB0aHJvdyBuZXcgRXJyb3IoYFJlY29yZCB3aXRoIGlkICR7aWR9IG5vdCBmb3VuZGApO1xuICAgICAgcmV0dXJuIHJlY29yZDtcbiAgICB9XG4gIFxuICAgIGFzeW5jIGNyZWF0ZVJlY29yZDxUPihyZWNvcmQ6IFJlY29yZDxUPik6IFByb21pc2U8UmVjb3JkPFQ+PiB7XG4gICAgICBjb25zdCByZWNvcmRzID0gYXdhaXQgdGhpcy5nZXRBbGxSZWNvcmRzKCk7XG4gICAgICBjb25zdCBpZDogbnVtYmVyID0gcmVjb3Jkcy5sZW5ndGggKyAxO1xuICAgICAgcmVjb3JkLmlkID0gaWQudG9TdHJpbmcoKTtcbiAgICAgICAgcmVjb3Jkcy5wdXNoKHJlY29yZCk7XG4gICAgICBhd2FpdCB0aGlzLnNhdmUocmVjb3Jkcyk7XG4gICAgICByZXR1cm4gcmVjb3JkO1xuICAgIH1cbiAgXG4gICAgYXN5bmMgdXBkYXRlUmVjb3JkPFQ+KGlkOiBzdHJpbmcsIHJlY29yZDogUmVjb3JkPFQ+KTogUHJvbWlzZTxSZWNvcmQ8VD4+IHtcbiAgICAgIGNvbnN0IHJlY29yZHMgPSBhd2FpdCB0aGlzLmdldEFsbFJlY29yZHMoKTtcbiAgICAgIGNvbnN0IHJlY29yZEluZGV4ID0gcmVjb3Jkcy5maW5kSW5kZXgoKHJlY29yZCkgPT4gcmVjb3JkLmlkID09PSBpZCk7XG4gICAgICBpZiAocmVjb3JkSW5kZXggPT09IC0xKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgUmVjb3JkIHdpdGggaWQgJHtpZH0gbm90IGZvdW5kYCk7XG4gICAgICB9XG4gICAgICByZWNvcmRzW3JlY29yZEluZGV4XSA9IHJlY29yZDtcbiAgICAgIGF3YWl0IHRoaXMuc2F2ZShyZWNvcmRzKTtcbiAgICAgIHJldHVybiByZWNvcmQ7XG4gICAgfVxuICBcbiAgICBhc3luYyBkZWxldGVSZWNvcmQoaWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgY29uc3QgcmVjb3JkcyA9IGF3YWl0IHRoaXMuZ2V0QWxsUmVjb3JkcygpO1xuICAgICAgY29uc3QgcmVjb3JkID0gcmVjb3Jkcy5maW5kKChyZWNvcmQpID0+IHJlY29yZC5pZCA9PT0gaWQpO1xuICAgICAgaWYgKCFyZWNvcmQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBSZWNvcmQgd2l0aCBpZCAke2lkfSBub3QgZm91bmRgKTtcbiAgICAgIH1cbiAgICAgIHJlY29yZHMuc3BsaWNlKHJlY29yZHMuaW5kZXhPZihyZWNvcmQpLCAxKTtcbiAgICAgIGF3YWl0IHRoaXMuc2F2ZShyZWNvcmRzKTtcbiAgICB9XG4gIH1cbiAgIl19
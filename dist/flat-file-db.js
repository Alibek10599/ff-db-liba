"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlatFileDb = void 0;
const fs = require("fs");
const promises_1 = require("fs/promises");
const util = require("util");
var SIZE = 64;
class FlatFileDb {
    constructor(filePath) {
        this.filePath = filePath;
    }
    getFilePath() {
        return this.filePath;
    }
    async checkFileExists(path) {
        if (!fs.existsSync(path)) {
            await fs.writeFile(path, '[]', (err) => {
                if (err)
                    throw err;
            });
        }
        else {
            return true;
        }
    }
    async save(data) {
        let bytesRead = 0;
        let resultBuffer = Buffer.alloc(0);
        for (const record of data) {
            let buffer = Buffer.from(JSON.stringify(record.id).padEnd(SIZE, '\0'));
            const { id } = record, body = __rest(record, ["id"]);
            buffer = Buffer.concat([buffer, Buffer.from(JSON.stringify(body) + '\n')]);
            bytesRead += buffer.length;
            resultBuffer = Buffer.concat([resultBuffer, buffer], bytesRead);
        }
        await (0, promises_1.writeFile)(this.filePath, resultBuffer);
    }
    async getBufferStats(offset, position) {
        const promisifiedRead = util.promisify(fs.read);
        const fileHandle = await (0, promises_1.open)(this.filePath, 'r');
        const fd = await fileHandle.fd;
        const stat = await fileHandle.stat();
        const buffer = Buffer.alloc(stat.size);
        const { bytesRead } = await promisifiedRead(fd, buffer, offset, stat.size, position);
        return { buffer, bytesRead };
    }
    async getAllRecords() {
        const { buffer, bytesRead } = await this.getBufferStats(0, 0);
        const records = [];
        const data = buffer.toString('utf8', 0, bytesRead).split('\n');
        data.pop();
        for (const record of data) {
            if (record) {
                const body = record.substring(SIZE).trim();
                const id = record[1];
                records.push(Object.assign({ id: id }, JSON.parse(body)));
            }
        }
        return records;
    }
    async getRecordById(id) {
        const record = (await this.getAllRecords()).find((record) => record.id === id);
        if (!record)
            throw new Error(`Record with id ${id} not found`);
        return record;
    }
    async createRecord(record) {
        const { id } = record, body = __rest(record, ["id"]);
        const records = await this.getAllRecords();
        const recordId = records.length + 1;
        record.id = recordId.toString();
        records.push(Object.assign({ id: recordId.toString() }, body));
        await this.save(records);
        return record;
    }
    async updateRecord(id, record) {
        const records = await this.getAllRecords();
        const recordIndex = records.findIndex((record) => record.id === id);
        if (recordIndex === -1) {
            throw new Error(`Record with id ${id} not found`);
        }
        records[recordIndex] = record;
        await this.save(records);
        return record;
    }
    async deleteRecord(id) {
        const records = await this.getAllRecords();
        const record = records.find((record) => record.id === id);
        if (!record) {
            throw new Error(`Record with id ${id} not found`);
        }
        records.splice(records.indexOf(record), 1);
        await this.save(records);
        return id;
    }
}
exports.FlatFileDb = FlatFileDb;
//# sourceMappingURL=data:application/json;base64,
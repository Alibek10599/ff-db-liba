"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlatFileDb = void 0;
const fs = require("fs");
const promises_1 = require("fs/promises");
var SIZE = 64;
class FlatFileDb {
    constructor(filePath) {
        this.filePath = filePath;
    }
    getFilePath() {
        return this.filePath;
    }
    async checkFileExists(path) {
        if (!fs.existsSync(path)) {
            await fs.writeFile(path, '[]', (err) => {
                if (err)
                    throw err;
            });
        }
        else {
            return true;
        }
    }
    async save(data) {
        await (0, promises_1.writeFile)(this.filePath, JSON.stringify(data));
    }
    async getAllRecords() {
        const records = JSON.parse(await (0, promises_1.readFile)(this.filePath, 'utf8'));
        return records;
    }
    async getRecordById(id) {
        const record = (await this.getAllRecords()).find((record) => record.id === id);
        if (!record)
            throw new Error(`Record with id ${id} not found`);
        return record;
    }
    async createRecord(record) {
        const records = await this.getAllRecords();
        const id = records.length + 1;
        record.id = id.toString();
        records.push(record);
        await this.save(records);
        return record;
    }
    async updateRecord(id, record) {
        const records = await this.getAllRecords();
        const recordIndex = records.findIndex((record) => record.id === id);
        if (recordIndex === -1) {
            throw new Error(`Record with id ${id} not found`);
        }
        records[recordIndex] = record;
        await this.save(records);
        return record;
    }
    async deleteRecord(id) {
        const records = await this.getAllRecords();
        const record = records.find((record) => record.id === id);
        if (!record) {
            throw new Error(`Record with id ${id} not found`);
        }
        records.splice(records.indexOf(record), 1);
        await this.save(records);
        return id;
    }
}
exports.FlatFileDb = FlatFileDb;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxhdC1maWxlLWRiLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2ZsYXQtZmlsZS1kYi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx5QkFBeUI7QUFDekIsMENBQWtEO0FBSWxELElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUVkLE1BQWEsVUFBVTtJQUduQixZQUFZLFFBQWdCO1FBQzFCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzNCLENBQUM7SUFFRCxXQUFXO1FBQ1QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxLQUFLLENBQUMsZUFBZSxDQUFDLElBQVk7UUFDaEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDeEIsTUFBTSxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDbkMsSUFBSSxHQUFHO29CQUFFLE1BQU0sR0FBRyxDQUFDO1lBQ3ZCLENBQUMsQ0FBQyxDQUFDO1NBQ0o7YUFBTTtZQUNMLE9BQU8sSUFBSSxDQUFDO1NBQ2I7SUFDSCxDQUFDO0lBRUQsS0FBSyxDQUFDLElBQUksQ0FBSSxJQUFpQjtRQUM3QixNQUFNLElBQUEsb0JBQVMsRUFDYixJQUFJLENBQUMsUUFBUSxFQUNiLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQ3JCLENBQUM7SUFDSixDQUFDO0lBRUQsS0FBSyxDQUFDLGFBQWE7UUFDZixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUN0QixNQUFNLElBQUEsbUJBQVEsRUFBQyxJQUFJLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUN2QixDQUFDO1FBQ2pCLE9BQU8sT0FBTyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxLQUFLLENBQUMsYUFBYSxDQUFJLEVBQVU7UUFDL0IsTUFBTSxNQUFNLEdBQUcsQ0FBQyxNQUFNLElBQUksQ0FBQyxhQUFhLEVBQUssQ0FBQyxDQUFDLElBQUksQ0FDakQsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUM3QixDQUFDO1FBQ0YsSUFBSSxDQUFDLE1BQU07WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLGtCQUFrQixFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQy9ELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxLQUFLLENBQUMsWUFBWSxDQUFJLE1BQWlCO1FBQ3JDLE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQzNDLE1BQU0sRUFBRSxHQUFXLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3hCLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdkIsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3pCLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxLQUFLLENBQUMsWUFBWSxDQUFJLEVBQVUsRUFBRSxNQUFpQjtRQUNqRCxNQUFNLE9BQU8sR0FBRyxNQUFNLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUMzQyxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ3BFLElBQUksV0FBVyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ3RCLE1BQU0sSUFBSSxLQUFLLENBQUMsa0JBQWtCLEVBQUUsWUFBWSxDQUFDLENBQUM7U0FDbkQ7UUFDRCxPQUFPLENBQUMsV0FBVyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQzlCLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6QixPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQsS0FBSyxDQUFDLFlBQVksQ0FBQyxFQUFVO1FBQzNCLE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQzNDLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDMUQsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNYLE1BQU0sSUFBSSxLQUFLLENBQUMsa0JBQWtCLEVBQUUsWUFBWSxDQUFDLENBQUM7U0FDbkQ7UUFDRCxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDM0MsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3pCLE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQztDQUNGO0FBekVILGdDQXlFRyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmltcG9ydCB7IHJlYWRGaWxlLCB3cml0ZUZpbGUgfSBmcm9tICdmcy9wcm9taXNlcyc7XG5cbmltcG9ydCB7IFJlY29yZCB9IGZyb20gJy4vaW50ZXJmYWNlJztcblxudmFyIFNJWkUgPSA2NDtcblxuZXhwb3J0IGNsYXNzIEZsYXRGaWxlRGIge1xuICAgIHB1YmxpYyBmaWxlUGF0aDogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoZmlsZVBhdGg6IHN0cmluZykge1xuICAgICAgdGhpcy5maWxlUGF0aCA9IGZpbGVQYXRoO1xuICAgIH1cbiAgICBcbiAgICBnZXRGaWxlUGF0aCgpOiBzdHJpbmcge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsZVBhdGg7XG4gICAgfVxuICBcbiAgICBhc3luYyBjaGVja0ZpbGVFeGlzdHMocGF0aDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICBpZiAoIWZzLmV4aXN0c1N5bmMocGF0aCkpIHtcbiAgICAgICAgYXdhaXQgZnMud3JpdGVGaWxlKHBhdGgsICdbXScsIChlcnIpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnIpIHRocm93IGVycjtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIFxuICAgIGFzeW5jIHNhdmU8VD4oZGF0YTogUmVjb3JkPFQ+W10pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgIGF3YWl0IHdyaXRlRmlsZShcbiAgICAgICAgdGhpcy5maWxlUGF0aCxcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkoZGF0YSlcbiAgICAgICk7XG4gICAgfVxuICBcbiAgICBhc3luYyBnZXRBbGxSZWNvcmRzPFQ+KCk6IFByb21pc2U8UmVjb3JkPFQ+W10+IHtcbiAgICAgICAgY29uc3QgcmVjb3JkcyA9IEpTT04ucGFyc2UoXG4gICAgICAgICAgICBhd2FpdCByZWFkRmlsZSh0aGlzLmZpbGVQYXRoLCAndXRmOCcpXG4gICAgICAgICAgKSBhcyBSZWNvcmQ8VD5bXTtcbiAgICAgICAgICByZXR1cm4gcmVjb3JkcztcbiAgICB9XG4gIFxuICAgIGFzeW5jIGdldFJlY29yZEJ5SWQ8VD4oaWQ6IHN0cmluZyk6IFByb21pc2U8UmVjb3JkPFQ+PiB7XG4gICAgICBjb25zdCByZWNvcmQgPSAoYXdhaXQgdGhpcy5nZXRBbGxSZWNvcmRzPFQ+KCkpLmZpbmQoXG4gICAgICAgIChyZWNvcmQpID0+IHJlY29yZC5pZCA9PT0gaWRcbiAgICAgICk7XG4gICAgICBpZiAoIXJlY29yZCkgdGhyb3cgbmV3IEVycm9yKGBSZWNvcmQgd2l0aCBpZCAke2lkfSBub3QgZm91bmRgKTtcbiAgICAgIHJldHVybiByZWNvcmQ7XG4gICAgfVxuICBcbiAgICBhc3luYyBjcmVhdGVSZWNvcmQ8VD4ocmVjb3JkOiBSZWNvcmQ8VD4pOiBQcm9taXNlPFJlY29yZDxUPj4ge1xuICAgICAgY29uc3QgcmVjb3JkcyA9IGF3YWl0IHRoaXMuZ2V0QWxsUmVjb3JkcygpO1xuICAgICAgY29uc3QgaWQ6IG51bWJlciA9IHJlY29yZHMubGVuZ3RoICsgMTtcbiAgICAgIHJlY29yZC5pZCA9IGlkLnRvU3RyaW5nKCk7XG4gICAgICAgIHJlY29yZHMucHVzaChyZWNvcmQpO1xuICAgICAgYXdhaXQgdGhpcy5zYXZlKHJlY29yZHMpO1xuICAgICAgcmV0dXJuIHJlY29yZDtcbiAgICB9XG4gIFxuICAgIGFzeW5jIHVwZGF0ZVJlY29yZDxUPihpZDogc3RyaW5nLCByZWNvcmQ6IFJlY29yZDxUPik6IFByb21pc2U8UmVjb3JkPFQ+PiB7XG4gICAgICBjb25zdCByZWNvcmRzID0gYXdhaXQgdGhpcy5nZXRBbGxSZWNvcmRzKCk7XG4gICAgICBjb25zdCByZWNvcmRJbmRleCA9IHJlY29yZHMuZmluZEluZGV4KChyZWNvcmQpID0+IHJlY29yZC5pZCA9PT0gaWQpO1xuICAgICAgaWYgKHJlY29yZEluZGV4ID09PSAtMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFJlY29yZCB3aXRoIGlkICR7aWR9IG5vdCBmb3VuZGApO1xuICAgICAgfVxuICAgICAgcmVjb3Jkc1tyZWNvcmRJbmRleF0gPSByZWNvcmQ7XG4gICAgICBhd2FpdCB0aGlzLnNhdmUocmVjb3Jkcyk7XG4gICAgICByZXR1cm4gcmVjb3JkO1xuICAgIH1cbiAgXG4gICAgYXN5bmMgZGVsZXRlUmVjb3JkKGlkOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgY29uc3QgcmVjb3JkcyA9IGF3YWl0IHRoaXMuZ2V0QWxsUmVjb3JkcygpO1xuICAgICAgY29uc3QgcmVjb3JkID0gcmVjb3Jkcy5maW5kKChyZWNvcmQpID0+IHJlY29yZC5pZCA9PT0gaWQpO1xuICAgICAgaWYgKCFyZWNvcmQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBSZWNvcmQgd2l0aCBpZCAke2lkfSBub3QgZm91bmRgKTtcbiAgICAgIH1cbiAgICAgIHJlY29yZHMuc3BsaWNlKHJlY29yZHMuaW5kZXhPZihyZWNvcmQpLCAxKTtcbiAgICAgIGF3YWl0IHRoaXMuc2F2ZShyZWNvcmRzKTtcbiAgICAgIHJldHVybiBpZDtcbiAgICB9XG4gIH1cbiAgIl19
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlatFileDb = void 0;
const fs = require("fs");
const promises_1 = require("fs/promises");
class FlatFileDb {
    constructor(filePath) {
        this.dbMap = new Map();
        this.filePath = filePath;
        const records = this.getAllRecords();
        records.then((records) => {
            records.map((record) => {
                this.dbMap.set(record.id, record);
            });
        });
    }
    getFilePath() {
        return this.filePath;
    }
    async checkFileExists(path) {
        if (!fs.existsSync(path)) {
            fs.writeFileSync(path, '');
        }
        return true;
    }
    async save() {
        await (0, promises_1.writeFile)(this.filePath, JSON.stringify(Object.fromEntries(this.dbMap)));
    }
    async getAllRecords() {
        const records = JSON.parse(await (0, promises_1.readFile)(this.filePath, 'utf8'));
        records.map((record) => {
            this.dbMap.set(record.id, record);
        });
        return records;
    }
    async getRecordById(id) {
        const record = (await this.getAllRecords()).find((record) => record.id === id);
        if (!record)
            throw new Error(`Record with id ${id} not found`);
        return record;
    }
    async createRecord(record) {
        await this.getAllRecords();
        const id = this.dbMap.size.toString() + 1;
        record.id = id;
        this.dbMap.set(id, record);
        await this.save();
        return record;
    }
    async updateRecord(id, record) {
        const records = await this.getAllRecords();
        const recordIndex = records.findIndex((record) => record.id === id);
        if (recordIndex === -1) {
            throw new Error(`Record with id ${id} not found`);
        }
        this.dbMap.set(id, record);
        await this.save();
        return record;
    }
    async deleteRecord(id) {
        const records = await this.getAllRecords();
        const record = records.find((record) => record.id === id);
        if (!record) {
            throw new Error(`Record with id ${id} not found`);
        }
        this.dbMap.delete(id);
        await this.save();
    }
}
exports.FlatFileDb = FlatFileDb;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxhdC1maWxlLWRiLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2ZsYXQtZmlsZS1kYi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx5QkFBeUI7QUFDekIsMENBQWtEO0FBSWxELE1BQWEsVUFBVTtJQUluQixZQUFZLFFBQWdCO1FBRnJCLFVBQUssR0FBRyxJQUFJLEdBQUcsRUFBMEIsQ0FBQztRQUcvQyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDckMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ3ZCLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtnQkFDckIsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNwQyxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUdELFdBQVc7UUFDVCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQztJQUVELEtBQUssQ0FBQyxlQUFlLENBQUMsSUFBWTtRQUNoQyxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN4QixFQUFFLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztTQUM1QjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELEtBQUssQ0FBQyxJQUFJO1FBQ1IsTUFBTSxJQUFBLG9CQUFTLEVBQ2IsSUFBSSxDQUFDLFFBQVEsRUFDYixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQy9DLENBQUM7SUFDSixDQUFDO0lBRUQsS0FBSyxDQUFDLGFBQWE7UUFDakIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FDeEIsTUFBTSxJQUFBLG1CQUFRLEVBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FDdkIsQ0FBQztRQUNqQixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDckIsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNwQyxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxLQUFLLENBQUMsYUFBYSxDQUFJLEVBQVU7UUFDL0IsTUFBTSxNQUFNLEdBQUcsQ0FBQyxNQUFNLElBQUksQ0FBQyxhQUFhLEVBQUssQ0FBQyxDQUFDLElBQUksQ0FDakQsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUM3QixDQUFDO1FBQ0YsSUFBSSxDQUFDLE1BQU07WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLGtCQUFrQixFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQy9ELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxLQUFLLENBQUMsWUFBWSxDQUFJLE1BQWlCO1FBQ3JDLE1BQU0sSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQzNCLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFFLENBQUMsQ0FBQztRQUN6QyxNQUFNLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNmLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMzQixNQUFNLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNsQixPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQsS0FBSyxDQUFDLFlBQVksQ0FBSSxFQUFVLEVBQUUsTUFBaUI7UUFDakQsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDM0MsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUNwRSxJQUFJLFdBQVcsS0FBSyxDQUFDLENBQUMsRUFBRTtZQUN0QixNQUFNLElBQUksS0FBSyxDQUFDLGtCQUFrQixFQUFFLFlBQVksQ0FBQyxDQUFDO1NBQ25EO1FBQ0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzNCLE1BQU0sSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2xCLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxLQUFLLENBQUMsWUFBWSxDQUFDLEVBQVU7UUFDM0IsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDM0MsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1gsTUFBTSxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxZQUFZLENBQUMsQ0FBQztTQUNuRDtRQUNELElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3BCLENBQUM7Q0FDRjtBQWhGSCxnQ0FnRkciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQgeyB3cml0ZUZpbGUsIHJlYWRGaWxlIH0gZnJvbSAnZnMvcHJvbWlzZXMnO1xuXG5pbXBvcnQgeyBSZWNvcmQgfSBmcm9tICcuL2ludGVyZmFjZSc7XG5cbmV4cG9ydCBjbGFzcyBGbGF0RmlsZURiIHtcbiAgICBwdWJsaWMgZmlsZVBhdGg6IHN0cmluZztcbiAgICBwdWJsaWMgZGJNYXAgPSBuZXcgTWFwPHN0cmluZywgUmVjb3JkPE9iamVjdD4+KCk7XG5cbiAgICBjb25zdHJ1Y3RvcihmaWxlUGF0aDogc3RyaW5nKSB7XG4gICAgICB0aGlzLmZpbGVQYXRoID0gZmlsZVBhdGg7XG4gICAgICBjb25zdCByZWNvcmRzID0gdGhpcy5nZXRBbGxSZWNvcmRzKCk7XG4gICAgICByZWNvcmRzLnRoZW4oKHJlY29yZHMpID0+IHtcbiAgICAgICAgcmVjb3Jkcy5tYXAoKHJlY29yZCkgPT4ge1xuICAgICAgICAgIHRoaXMuZGJNYXAuc2V0KHJlY29yZC5pZCwgcmVjb3JkKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgXG4gICAgZ2V0RmlsZVBhdGgoKTogc3RyaW5nIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbGVQYXRoO1xuICAgIH1cbiAgXG4gICAgYXN5bmMgY2hlY2tGaWxlRXhpc3RzKHBhdGg6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgaWYgKCFmcy5leGlzdHNTeW5jKHBhdGgpKSB7XG4gICAgICAgIGZzLndyaXRlRmlsZVN5bmMocGF0aCwgJycpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICBcbiAgICBhc3luYyBzYXZlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgYXdhaXQgd3JpdGVGaWxlKFxuICAgICAgICB0aGlzLmZpbGVQYXRoLFxuICAgICAgICBKU09OLnN0cmluZ2lmeShPYmplY3QuZnJvbUVudHJpZXModGhpcy5kYk1hcCkpXG4gICAgICApO1xuICAgIH1cbiAgXG4gICAgYXN5bmMgZ2V0QWxsUmVjb3JkczxUPigpOiBQcm9taXNlPFJlY29yZDxUPltdPiB7XG4gICAgICBjb25zdCByZWNvcmRzID0gSlNPTi5wYXJzZShcbiAgICAgICAgYXdhaXQgcmVhZEZpbGUodGhpcy5maWxlUGF0aCwgJ3V0ZjgnKVxuICAgICAgKSBhcyBSZWNvcmQ8VD5bXTtcbiAgICAgIHJlY29yZHMubWFwKChyZWNvcmQpID0+IHtcbiAgICAgICAgdGhpcy5kYk1hcC5zZXQocmVjb3JkLmlkLCByZWNvcmQpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVjb3JkcztcbiAgICB9XG4gIFxuICAgIGFzeW5jIGdldFJlY29yZEJ5SWQ8VD4oaWQ6IHN0cmluZyk6IFByb21pc2U8UmVjb3JkPFQ+PiB7XG4gICAgICBjb25zdCByZWNvcmQgPSAoYXdhaXQgdGhpcy5nZXRBbGxSZWNvcmRzPFQ+KCkpLmZpbmQoXG4gICAgICAgIChyZWNvcmQpID0+IHJlY29yZC5pZCA9PT0gaWRcbiAgICAgICk7XG4gICAgICBpZiAoIXJlY29yZCkgdGhyb3cgbmV3IEVycm9yKGBSZWNvcmQgd2l0aCBpZCAke2lkfSBub3QgZm91bmRgKTtcbiAgICAgIHJldHVybiByZWNvcmQ7XG4gICAgfVxuICBcbiAgICBhc3luYyBjcmVhdGVSZWNvcmQ8VD4ocmVjb3JkOiBSZWNvcmQ8VD4pOiBQcm9taXNlPFJlY29yZDxUPj4ge1xuICAgICAgYXdhaXQgdGhpcy5nZXRBbGxSZWNvcmRzKCk7XG4gICAgICBjb25zdCBpZCA9IHRoaXMuZGJNYXAuc2l6ZS50b1N0cmluZygpICsxO1xuICAgICAgcmVjb3JkLmlkID0gaWQ7XG4gICAgICB0aGlzLmRiTWFwLnNldChpZCwgcmVjb3JkKTtcbiAgICAgIGF3YWl0IHRoaXMuc2F2ZSgpO1xuICAgICAgcmV0dXJuIHJlY29yZDtcbiAgICB9XG4gIFxuICAgIGFzeW5jIHVwZGF0ZVJlY29yZDxUPihpZDogc3RyaW5nLCByZWNvcmQ6IFJlY29yZDxUPik6IFByb21pc2U8UmVjb3JkPFQ+PiB7XG4gICAgICBjb25zdCByZWNvcmRzID0gYXdhaXQgdGhpcy5nZXRBbGxSZWNvcmRzKCk7XG4gICAgICBjb25zdCByZWNvcmRJbmRleCA9IHJlY29yZHMuZmluZEluZGV4KChyZWNvcmQpID0+IHJlY29yZC5pZCA9PT0gaWQpO1xuICAgICAgaWYgKHJlY29yZEluZGV4ID09PSAtMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFJlY29yZCB3aXRoIGlkICR7aWR9IG5vdCBmb3VuZGApO1xuICAgICAgfVxuICAgICAgdGhpcy5kYk1hcC5zZXQoaWQsIHJlY29yZCk7XG4gICAgICBhd2FpdCB0aGlzLnNhdmUoKTtcbiAgICAgIHJldHVybiByZWNvcmQ7XG4gICAgfVxuICBcbiAgICBhc3luYyBkZWxldGVSZWNvcmQoaWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgY29uc3QgcmVjb3JkcyA9IGF3YWl0IHRoaXMuZ2V0QWxsUmVjb3JkcygpO1xuICAgICAgY29uc3QgcmVjb3JkID0gcmVjb3Jkcy5maW5kKChyZWNvcmQpID0+IHJlY29yZC5pZCA9PT0gaWQpO1xuICAgICAgaWYgKCFyZWNvcmQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBSZWNvcmQgd2l0aCBpZCAke2lkfSBub3QgZm91bmRgKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZGJNYXAuZGVsZXRlKGlkKTtcbiAgICAgIGF3YWl0IHRoaXMuc2F2ZSgpO1xuICAgIH1cbiAgfSJdfQ==